<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Example | Liliana Kastilio]]></title>
  <link href="http://lili2311.github.io/blog/categories/example/atom.xml" rel="self"/>
  <link href="http://lili2311.github.io/"/>
  <updated>2016-10-31T23:33:56+00:00</updated>
  <id>http://lili2311.github.io/</id>
  <author>
    <name><![CDATA[Liliana Kastilio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Technical Code Interview Prep Notes]]></title>
    <link href="http://lili2311.github.io/blog/2015/02/21/Technical-Code-Interview-Preparation-Notes/"/>
    <updated>2015-02-21T00:00:00+00:00</updated>
    <id>http://lili2311.github.io/blog/2015/02/21/Technical-Code-Interview-Preparation-Notes</id>
    <content type="html"><![CDATA[<h4>Data Structures and Algorithms</h4>

<h4>Question 1: How do you reverse a linked list using recursion (Java)?</h4>

<p>I found the answer <a href="http://stackoverflow.com/questions/354875/reversing-a-linked-list-in-java-recursively">on this stackoverflow post &ldquo;Reversing a linked list in Java, recursively&rdquo;</a>. This can be solved answering the following questions:</p>

<ol>
<li>What is the reverse of <code>null</code> (the empty list)? <code>null</code>.</li>
<li>What is the reverse of a one element list? the element.</li>
<li>What is the reverse of an n element list? the reverse of the second element on followed by the first element.</li>
</ol>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="kr">public</span> <span class="nx">ListNode</span> <span class="nx">Reverse</span><span class="p">(</span><span class="nx">ListNode</span> <span class="nx">list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// What is the reverse of null (the empty list)? null.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">list</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// What is the reverse of a one element list? the element.</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">next</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="k">return</span> <span class="nx">list</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// What is the reverse of an n element list? the reverse of the second element on followed by the first element.</span>
</span><span class='line'><span class="c1">// so we grab the second element (which will be the last after we reverse it)</span>
</span><span class='line'><span class="nx">ListNode</span> <span class="nx">secondElem</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// bug fix - need to unlink list from the rest or you will get a cycle</span>
</span><span class='line'><span class="nx">list</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// then we reverse everything from the second element on</span>
</span><span class='line'><span class="nx">ListNode</span> <span class="nx">reverseRest</span> <span class="o">=</span> <span class="nx">Reverse</span><span class="p">(</span><span class="nx">secondElem</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// then we join the two lists</span>
</span><span class='line'><span class="nx">secondElem</span><span class="p">.</span><span class="nx">Next</span> <span class="o">=</span> <span class="nx">list</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">reverseRest</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Question 2: How do you find a length of a linked list?</h4>

<p>Traverse through all the elements until you find the last node which points to <code>null</code>.</p>

<h4>Question 3: How do you find the middle of a linked list using only one pass?</h4>

<ol>
<li>Maintain two pointers as you traverse through the linked list.</li>
<li>Increment Pointer 1 on every node and only increment Pointer 2 on every 2nd node.</li>
<li>When you reach the end of the list, Pointer 2 will be pointing to the middle of the list.</li>
</ol>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">public</span> <span class="kr">class</span> <span class="nx">LinkedListTest</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">public</span> <span class="kr">static</span> <span class="k">void</span> <span class="nx">main</span><span class="p">(</span><span class="nb">String</span> <span class="nx">args</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Creating LinkedList with 4 elements including head</span>
</span><span class='line'>    <span class="nx">LinkedList</span> <span class="nx">linkedList</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">LinkedList</span><span class="p">.</span><span class="nx">Node</span> <span class="nx">head</span> <span class="o">=</span> <span class="nx">linkedList</span><span class="p">.</span><span class="nx">head</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">linkedList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">.</span><span class="nx">Node</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="mi">1</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;));</span>
</span><span class='line'>    <span class="nx">linkedList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">.</span><span class="nx">Node</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="mi">2</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;));</span>
</span><span class='line'>    <span class="nx">linkedList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">.</span><span class="nx">Node</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="mi">3</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// Finding middle element of LinkedList in single pass</span>
</span><span class='line'><span class="nx">LinkedList</span><span class="p">.</span><span class="nx">Node</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>
</span><span class='line'><span class="kr">int</span> <span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">LinkedList</span><span class="p">.</span><span class="nx">Node</span> <span class="nx">middle</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">length</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">length</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">middle</span> <span class="o">=</span> <span class="nx">middle</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">length</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">middle</span> <span class="o">=</span> <span class="nx">middle</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">System</span><span class="p">.</span><span class="nx">out</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span><span class="s2">&quot;Length of LinkedList: &quot;</span> <span class="o">+</span> <span class="nx">length</span><span class="p">);</span>
</span><span class='line'><span class="nx">System</span><span class="p">.</span><span class="nx">out</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span><span class="s2">&quot;Middle element of LinkedList : &quot;</span> <span class="o">+</span> <span class="nx">middle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Read more <a href="http://javarevisited.blogspot.com/2012/12/how-to-find-middle-element-of-linked-list-one-pass.html#ixzz3SPYQIL5E">here</a>.</p>

<h4>Question 4: Does a given linked list have a loop?</h4>

<p>This is solved similarly to the question above &ldquo;Question 3: How do you find the middle of a linked list using only one pass?&rdquo;:</p>

<ol>
<li>Maintain 2 pointers as you traverse through the list.</li>
<li>Increment Pointer 1 on every node and only increment Pointer 2 on every 2nd node.</li>
<li>If Pointer 1 and Pointer 2 point to the same node, the list has a loop.</li>
</ol>


<h4>Question 5: An integer array has numbers from 1 to 100, there is a duplicate in the array. Find the duplicate.</h4>

<ol>
<li>Add all the numbers stored in the array.</li>
<li>Find the expected sum of all the numbers if there were no duplicates. The sum is represented by a formula <code>n(n+1)/2</code>.</li>
<li>Subtract the actual sum from the expected sum. The answer is the dulicate number.</li>
<li>This works if there is 1 duplicate in the array, for multiple duplicates use a Hash Map, where the number is the key and the the occurence is the value. Any values larger than 1 will reveal the duplicates.</li>
</ol>


<h4>Question 6: What is the difference between a Stack vs a Queue?</h4>

<p>A Stack is <code>LIFO (Last In First Out)</code> structure and a Queue is a <code>FIFO (First In First Out)</code> structure.</p>

<h4>Question 7: What is a Binary Search Tree?</h4>

<p>They are also sometimes called ordered or sorted binary trees, are a class of data structures used to implement lookup tables and dynamic sets. They store data items, known as keys, and allow fast insertion and deletion of such keys, as well as checking whether a key is present in a tree. In a binary search tree:</p>

<ol>
<li>Every left node is smaller than the root element.</li>
<li>Every right node is larger than the root element.</li>
<li>There are no duplicates in the binary search tree.</li>
</ol>


<h4>Question 8: How would you sort and array using a Bubble sort?</h4>

<p>Bubble sort is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order. Worst Case performance is <code>O(n^2)</code>, best case is <code>O(n)</code>.</p>

<ol>
<li>Start comparing first and second element <code>array[0]</code> and <code>array[1]</code>.</li>
<li>If <code>array[0]</code> > <code>array[1]</code> then swap numbers e.g. <code>array[0] = array[1]</code> and <code>array[1] = array[0]</code>.</li>
<li>Repeat with the next two element, <code>array[1]</code> and <code>array[2]</code> and so on until you reach the end of the list</li>
<li>This is referred as one pass and at the end of first pass largest number is at last.</li>
<li>Repeat this comparison again starting from <code>array[0]</code> but this time going till second last pair only <code>array[n - 1]</code>.</li>
</ol>


<p>In a Bubble sort we need <code>n - 1</code> iteration to sort <code>n</code> elements at end of first iteration largest number is sorted and subsequently numbers smaller than that.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span><span class="p">[</span><span class="mi">13</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">];</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Sorted</span> <span class="nb">Array</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">bubbleSort</span><span class="p">(</span><span class="nx">array</span><span class="p">));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">bubbleSort</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">swapped</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">swapped</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span> <span class="o">+&amp;</span><span class="nx">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">j</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">swapped</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">swapped</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span><span class="p">;</span> <span class="c1">// if no swaps have been made, the array is sorted. No need to keep looping.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Question 9: How would you check if a number is a palindrome?</h4>

<p>Using a modulo we can determine if a number is a palindrome:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">2332</span><span class="p">;</span> <span class="c1">// example number</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">orig_num</span> <span class="o">=</span> <span class="nx">number</span><span class="p">;</span> <span class="c1">// keep a copy of the original number</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">new_num</span> <span class="o">=</span> <span class="nx">number</span><span class="p">;</span> <span class="c1">// this number will change as we try to reverse the number without using strings</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">check_num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">check_is_palindrome</span> <span class="o">=</span><span class="p">[];</span> <span class="c1">// storing all the individual numbers here  as we get them in reverse order.</span>
</span><span class='line'><span class="c1">// console.log(&amp;ldquo;Number to check: &amp;rdquo; + number);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">isPalindrome</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">number</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">num_of_passes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">new_num</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">num_of_passes</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">remainder</span> <span class="o">=</span> <span class="nx">number</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//console.log(&quot;Remainder: &quot; + remainder);</span>
</span><span class='line'>    <span class="nx">new_num</span> <span class="o">=</span> <span class="p">(</span><span class="nx">number</span> <span class="o">-</span> <span class="nx">remainder</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//console.log(&quot;New number: &quot;+ new_num);</span>
</span><span class='line'>    <span class="nx">number</span> <span class="o">=</span> <span class="nx">new_num</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">check_is_palindrome</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">remainder</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//console.log(check_is_palindrome);</span>
</span><span class='line'>    <span class="c1">//console.log(&quot;Num of passes: &quot; + num_of_passes)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">final_check_num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// this is to save our result after reversing the number</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">check_is_palindrome</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">final_check_num</span> <span class="o">+=</span> <span class="nx">check_is_palindrome</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="nx">num_of_passes</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">num_of_passes</span> <span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//console.log(&quot;Final_check_num: &quot; + final_check_num);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">orig_num</span> <span class="o">===</span> <span class="nx">final_check_num</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Is</span> <span class="nx">number</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">number</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span> <span class="nx">a</span> <span class="nx">palindrome</span><span class="o">?</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">isPalindrome</span><span class="p">(</span><span class="nx">number</span><span class="p">));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Question 10: Describe a Selection Sort?</h4>

<p>Selection sort is a sorting algorithm, specifically an in-place comparison sort. It has <code>O(n^2)</code> time complexity, making it inefficient on large lists. It performs worse than the similar insertion sort.</p>

<ol>
<li>Divide the list into two parts: the sublist of items already sorted and the sublist of items left to be sorted. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list.</li>
<li>Find the smallest or largest element in the unsorted sublist.</li>
<li>Exchange places with the leftmost unsorted item.</li>
<li>Repeat 2 &amp; 3 until no unsorted items left.</li>
</ol>


<h4>Question 11: Describe a Shell Sort?</h4>

<p>The method starts by sorting pairs of elements far apart from each other, then progressively reducing the gap between elements to be compared. Starting with far apart elements can move some out-of-place elements into position faster than a simple nearest neighbor exchange. It is similar to the Insertion sort that allows the exchange of items that are far apart. Worst case performance is <code>O(n^2)</code>, best case is O<code>(n log2 n)</code>. Picking the correct gaps is difficult, they should be reducing until the gap is 1.</p>

<h4>Question 12: Describe an Insertion Sort?</h4>

<p>Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.</p>

<ol>
<li>For each item, remove form unsorted and place in the correct place in teh sorted list or sub-list</li>
<li>Move up all larger elements if required to place the item in the correct place.</li>
</ol>


<h4>Question 13: Describe a Quick Sort?</h4>

<p>This is an efficient sorting algorithm. The steps are:</p>

<ol>
<li>Pick an element, called a pivot, from the array.</li>
<li>Reorder the array so that all elements with values less than the pivot come before the pivot, while all elements with values greater than the pivot come after it (equal values can go either way).</li>
<li>After this partitioning, the pivot is in its final position. This is called the partition operation.</li>
<li>Recursively apply the above steps to the sub-array of elements with smaller values and separately to the sub-array of elements with greater values.</li>
<li>The last element is ussually chosen as the pivot, but this will yeild a wort case complexity on an already sorted array or on an array of identical elements.</li>
</ol>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">13</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">];</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Sorted</span> <span class="nb">Array</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">quickSort</span><span class="p">(</span><span class="nx">array</span><span class="p">));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">quickSort</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">answer</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="nx">answer</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">quicksort</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">pivot</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//console.log(a.length);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">left_a</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">right_a</span> <span class="o">=</span> <span class="p">[</span><span class="nx">pivot</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//console.log(&amp;ldquo;Comparing &amp;rdquo; + pivot &amp;ldquo; and a[i]= &amp;rdquo; + a[i]);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">pivot</span> <span class="o">&gt;</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]){</span>
</span><span class='line'>        <span class="nx">left_a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">pivot</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">right_a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">left_a</span><span class="p">,</span> <span class="nx">right_a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">answer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">quickSort</span><span class="p">(</span><span class="nx">left_a</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">answer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">quickSort</span><span class="p">(</span><span class="nx">right_a</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Question 14: Describe a Merge Sort?</h4>

<p>A merge sort is an <code>O(n log n)</code> comparison-based sorting algorithm. Mergesort is a divide and conquer algorithm that was invented by John von Neumann in 1945.
Conceptually, a merge sort works as follows:</p>

<ol>
<li>Divide the unsorted list into <code>n</code> sublists, each containing 1 element (a list of 1 element is considered sorted).</li>
<li>Repeatedly merge sublists to produce new sorted sublists until there is only 1 sublist remaining. This will be the sorted list.</li>
</ol>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">merge_sort</span><span class="p">(</span><span class="nx">list</span> <span class="nx">m</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// Base case. A list of zero or one elements is sorted, by definition.</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">length</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">m</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// Recursive case. Divide the list into equal-sized sublists.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">list</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">integer</span> <span class="nx">middle</span> <span class="o">=</span> <span class="nx">length</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'><span class="k">for</span> <span class="nx">each</span> <span class="nx">x</span> <span class="k">in</span> <span class="nx">m</span> <span class="nx">before</span> <span class="nx">middle</span>
</span><span class='line'>     <span class="nx">add</span> <span class="nx">x</span> <span class="nx">to</span> <span class="nx">left</span>
</span><span class='line'><span class="k">for</span> <span class="nx">each</span> <span class="nx">x</span> <span class="k">in</span> <span class="nx">m</span> <span class="nx">after</span> <span class="nx">or</span> <span class="nx">equal</span> <span class="nx">middle</span>
</span><span class='line'>     <span class="nx">add</span> <span class="nx">x</span> <span class="nx">to</span> <span class="nx">right</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Recursively sort both sublists</span>
</span><span class='line'><span class="nx">left</span> <span class="o">=</span> <span class="nx">merge_sort</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span>
</span><span class='line'><span class="nx">right</span> <span class="o">=</span> <span class="nx">merge_sort</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Then merge the now-sorted sublists.</span>
</span><span class='line'><span class="k">return</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">left</span><span class="p">,</span> <span class="nx">right</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">merge</span><span class="p">(</span><span class="nx">left</span><span class="p">,</span> <span class="nx">right</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">list</span> <span class="nx">result</span>
</span><span class='line'>    <span class="k">while</span> <span class="nx">notempty</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span> <span class="nx">and</span> <span class="nx">notempty</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">first</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="nx">first</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span>
</span><span class='line'>            <span class="nx">append</span> <span class="nx">first</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span> <span class="nx">to</span> <span class="nx">result</span>
</span><span class='line'>            <span class="nx">left</span> <span class="o">=</span> <span class="nx">rest</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="nx">append</span> <span class="nx">first</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span> <span class="nx">to</span> <span class="nx">result</span>
</span><span class='line'>            <span class="nx">right</span> <span class="o">=</span> <span class="nx">rest</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// either left or right may have elements left</span>
</span><span class='line'>    <span class="k">while</span> <span class="nx">notempty</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">append</span> <span class="nx">first</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span> <span class="nx">to</span> <span class="nx">result</span>
</span><span class='line'>        <span class="nx">left</span> <span class="o">=</span> <span class="nx">rest</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="nx">notempty</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">append</span> <span class="nx">first</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span> <span class="nx">to</span> <span class="nx">result</span>
</span><span class='line'>        <span class="nx">right</span> <span class="o">=</span> <span class="nx">rest</span><span class="p">(</span><span class="nx">right</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">result</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Question 15: Describe a Heap Sort?</h4>

<p>Heap sort is a comparison-based sorting algorithm. Heapsort can be thought of as an improved selection sort.</p>

<h4>HTML, CSS and JavaScript</h4>

<h4>Question 1: Explain what are selectors in CSS?</h4>

<p>Selectors enable selecting an element to which a style is to be applied. There are different types of selectors, like <code>class</code>, <code>id</code>, <code>descendant</code>, <code>type</code> selectors.</p>

<h4>Question 2: Explain a CSS box model?</h4>

<p>Each element is represented as a rectangular box. Each of these boxes is described using the standard box model. Each box has four edges: the margin edge, border edge, padding edge, and content edge.</p>

<p>There are two types of box model, <code>border-box</code> and <code>content-box</code>.</p>

<h4>Question 3: What are pseudo classes and what are they used for?</h4>

<p>Pseudo classes are similar to classes, but they are not defined in the markup. Some examples are <code>:link</code>, <code>:visited</code>, <code>:hover</code>, <code>:active</code>, <code>:first_line</code>. They are used to call a specific action on an element, for example changng the link colour after it is visited, or changing a link colour when it is hovered.</p>

<h4>Question 4: How do you optimize a website’s assets?</h4>

<p>Some of the ways to optimize assets are:</p>

<ol>
<li>Make fewer HTTP requests</li>
<li>Use a Content Delivery Network</li>
<li>Add an Expires header</li>
<li>Gzip components</li>
<li>Put CSS at the top</li>
<li>Move scripts to the bottom</li>
<li>Make JavaScript and CSS external</li>
<li>Minify JavaScript</li>
<li>Remove duplicate scripts</li>
</ol>


<h4>Question 5: What are the 3 different ways to apply CSS?</h4>

<ol>
<li>Inline</li>
<li>External</li>
<li>Embedded/Internal</li>
</ol>


<h4>Question 6: How is the float property implemented in CSS?</h4>

<p>Floats allow an element to be positioned horizontally, allowing elements below the floated element to flow around it. Several floating elements can be placed together to make a gallery type layout. To prevent subsequent elements from flowing around the floated element, pass in the clear property, followed by the side you wish to disable (i.e., ‘left’, ‘right’, ‘both’).</p>

<h4>Question 7: What is the purpose of the z-index and how is it used?</h4>

<p>The z-index helps specify the stack order of positioned elements that may overlap one another.</p>

<h4>Question 8: What&rsquo;s the difference between standards mode and quirks mode?</h4>

<p>One prominent difference between quirks and standards modes is the handling of the CSS Internet Explorer box model bug. Another notable difference is the vertical alignment of certain types of inline content.</p>

<p>If the browser decides that the document is modern, it’ll render it in standards mode. This means that, as a rule, CSS is applied in accordance with the CSS2 specification.
If the browser decides that the document is old-school, it’ll render it in quirks mode.</p>

<h4>Question 9: Graceful degradation vx progressive enhancement?</h4>

<p>Graceful degredation - making sure that everythign still works to some level in an older browser, providing with basic functionality of the site.</p>

<p>Progressive enhancement - starting off with the oldest browsers in mind and adding in better functionality for browsers that can handle it.</p>

<p>Degrading gracefully means looking back whereas enhancing progressively means looking forward whilst keeping your feet on firm ground.</p>

<h4>Useful Resources:</h4>

<ol>
<li><a href="https://developer.mozilla.org/">Mozilla Developer Network</a>.</li>
<li><a href="http://en.wikipedia.org/wiki/">Wikipedia</a>.</li>
<li><a href="http://stackoverflow.com/">StackOverflow</a>.</li>
<li><a href="http://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048">Tuts+</a>.</li>
<li><a href="http://javarevisited.blogspot.com/2012/12/how-to-find-middle-element-of-linked-list-one-pass.html#ixzz3SPYQIL5E">Java Revisited Blog</a>.</li>
<li><a href="http://quirksmode.org/css/user-interface/boxsizing.html">Quirks Mode</a>.</li>
<li><a href="https://developers.google.com/speed/articles">Google Developers</a>.</li>
<li><a href="http://www.skilledup.com/articles/25-css-interview-questions-answers/">Skilled Up</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Mozilla_Quirks_Mode_Behavior">Quirks vs Standard</a></li>
<li>Excellent resource of <a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions#fun-questions">front end interview questions</a>.</li>
<li><a href="http://http2.github.io/faq/">HTTP2</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 Canvas Particle System (Pt. 2)]]></title>
    <link href="http://lili2311.github.io/blog/2014/11/16/HTML5-Canvas-Particle-System-pt2/"/>
    <updated>2014-11-16T00:00:00+00:00</updated>
    <id>http://lili2311.github.io/blog/2014/11/16/HTML5-Canvas-Particle-System-pt2</id>
    <content type="html"><![CDATA[<p>This is a Part 2 of a tutorial post <a href="http://lili2311.github.io/blog/2014/07/22/Canvas-Particles/">HTML5 Canvas Particles System (Pt. 1)</a>. In this tutorial I will cover:</p>

<ol>
<li>Initialising Canvas (covered in <a href="http://lili2311.github.io/blog/2014/07/22/Canvas-Particles/">Pt. 1</a>)</li>
<li>Drawing circles in Canvas</li>
<li>Simple animation for particle movement using <code>SetInterval()</code></li>
<li>Improving the code using <code>RequestAnimationFrame()</code></li>
</ol>


<h4>Drawing Circles in Canvas</h4>

<p>Now that we have initialized a blank canvas, we can begin to draw in it. For our particle system we will need to draw the individual &ldquo;particles&rdquo;, each one will be drawn as a circle. In order to draw a circle in Canvas we need to first get the canvas element using <code>GetElementById</code> and set the width and height to the browser window, then specify that we are working in 2D using <code>getContext</code>:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">myCanvas</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="mi">2</span><span class="nx">d</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">;</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
We can now define our <code>draw()</code> function and then call it:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">x</span> <span class="o">=</span> <span class="mi">90</span><span class="p">;</span> <span class="c1">// x co-ordinate</span>
</span><span class='line'>    <span class="nx">y</span> <span class="o">=</span> <span class="mi">70</span><span class="p">;</span> <span class="c1">// y co-ordinate</span>
</span><span class='line'>    <span class="nx">r</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span> <span class="c1">// radius of a circle</span>
</span><span class='line'>    <span class="nx">c</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="err">#</span><span class="nx">ef5da1</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span> <span class="c1">// fill colour&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>
</span><span class='line'><span class="nx">ctx</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="nx">draw</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And here is our first circle:</p>

<p><img src="http://www.lilianakastilio.co.uk/images/canvas-particle-circle.png" alt="" /></p>

<p>We can now create an array of particles for us to draw. First let&rsquo;s initialise some variables that we will need available globally:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ps</span> <span class="o">=</span> <span class="p">[];</span><span class="c1">// initialize an empty particle array</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MAX_NUM</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span> <span class="c1">// this is the maximum number of particles we want to generate and draw</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">colors</span> <span class="o">=</span> <span class="p">[</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="mi">69</span><span class="nx">D2E7</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">A7DBD8</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">E0E4CC</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">F38630</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">FA6900</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">FF4E50</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">F9D423</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="p">];</span> <span class="c1">// this is an array of colour that the particles can be</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In order to generate all particles we will create a <code>spawn()</code> function and call it. Here we are populating the empty <code>ps[]</code> array with randomly generated values, within the given bound (in this case the width and height of the browser window):
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">spawn</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">MAX_NUM</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">x</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">y</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">r</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">c</span><span class="o">:</span> <span class="nx">colors</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">colors</span><span class="p">.</span><span class="nx">length</span><span class="p">)]</span>
</span><span class='line'>                <span class="p">};</span>                <span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">spawn</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We now need to modify our <code>draw()</code> function to loop over all the particles and draw them:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">ctx</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">c</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">ctx</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">draw</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>If we run the code now, we should see something like this:</p>

<p><img src="http://www.lilianakastilio.co.uk/images/canvas-particle-multiple.jpg" alt="" /></p>

<p>This is the full script:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ps</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MAX_NUM</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">colors</span> <span class="o">=</span> <span class="p">[</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="mi">69</span><span class="nx">D2E7</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">A7DBD8</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">E0E4CC</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">F38630</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">FA6900</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">FF4E50</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">F9D423</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="p">];</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">myCanvas</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="mi">2</span><span class="nx">d</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">;</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// create the particles</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">spawn</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">MAX_NUM</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">x</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">y</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="err">/em&gt;window.innerHeight,</span>
</span><span class='line'>              <span class="nx">r</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">c</span><span class="o">:</span> <span class="nx">colors</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="err">/em&gt;colors.length)]</span>
</span><span class='line'>            <span class="p">};</span>                <span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">ctx</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">c</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">ctx</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">spawn</span><span class="p">();</span>
</span><span class='line'><span class="nx">draw</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Simple Animation Using SetInterval()</h4>

<p>We are now ready to animate our particle system. We will need to write an <code>update()</code> function, which will update the <code>x</code> and <code>y</code> values of each particle on each frame. On each update we also need to reset the <code>width</code> and <code>height</code> to clear the canvas (Tip: remove this to see what happens if the canvas is not cleared):
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">update</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">c</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">c</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">y</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span> <span class="o">+=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We can now call this function on each frame using <code>SetInterval()</code> and then draw the particles with the updated co-ordinates:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">update</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">draw</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="mi">30</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You may have noticed that the particles simply dissapear once they have reached the bottom of the brower window, if you would liek to animation to keep on running we could reset the <code>x</code> and <code>y</code> of each aprticles if it leaves the screen to start all over again:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">reset</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//reset the x and y coordinates if a particle leaves the canvas</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//reset if y or coordinate has left the canvas</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">y</span> <span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">y</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">colors</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">colors</span><span class="p">.</span><span class="nx">length</span><span class="p">)];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//reset if x or coordinate has left the canvas</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">width</span> <span class="o">||</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="err">/em&gt;window.innerWidth;</span>
</span><span class='line'>          <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">colors</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">colors</span><span class="p">.</span><span class="nx">length</span><span class="p">)];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
Now we have to call this new <code>reset()</code> function on each frame:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">update</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">draw</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">reset</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="mi">30</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Now you have a never ending animation of colourful particles slowly making their way down the screen. The full <code>particles.js</code> can be found here:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// declare vars</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ps</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">MAX_NUM</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">colors</span> <span class="o">=</span> <span class="p">[</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="mi">69</span><span class="nx">D2E7</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">A7DBD8</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">E0E4CC</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">F38630</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">FA6900</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">FF4E50</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">F9D423</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="p">];</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">myCanvas</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="mi">2</span><span class="nx">d</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">;</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">spawn</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">//create the particles</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">spawn</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">MAX_NUM</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">x</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">y</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="err">/em&gt;window.innerHeight,</span>
</span><span class='line'>              <span class="nx">r</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">c</span><span class="o">:</span> <span class="nx">colors</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="err">/em&gt;colors.length)]</span>
</span><span class='line'>            <span class="p">};</span>                <span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">update</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">c</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">c</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">y</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">;</span>
</span><span class='line'>        <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span> <span class="o">+=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//ps[i].r = Math.random()*5;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">reset</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//reset the x and y coordinates if leaves the canvas</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//reset if y or coordinate has left the canvas</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">y</span> <span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">y</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">colors</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">colors</span><span class="p">.</span><span class="nx">length</span><span class="p">)];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//reset if x or coordinate has left the canvas</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">width</span> <span class="o">||</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">&lt;</span><span class="err">/em&gt;window.innerWidth;</span>
</span><span class='line'>          <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">colors</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">colors</span><span class="p">.</span><span class="nx">length</span><span class="p">)];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">ctx</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">r</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">c</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">ctx</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">update</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">draw</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">reset</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="mi">30</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Live demo <a href="http://www.lilianakastilio.co.uk/particles/particles.html">here</a>.</p>

<p>In Pt.3, I will cover how we can improve our animation using <code>RequestAnimationFrame()</code>(Pt.3 can be found <a href="">here</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixed on Scroll Animated Header With CSS and JavaScript]]></title>
    <link href="http://lili2311.github.io/blog/2014/10/04/Fixed-On-Scroll-Animated-Header/"/>
    <updated>2014-10-04T00:00:00+01:00</updated>
    <id>http://lili2311.github.io/blog/2014/10/04/Fixed-On-Scroll-Animated-Header</id>
    <content type="html"><![CDATA[<p>In this post I will explain how to create an animated sticky header, with CSS3 and JavaScript. So we are going to have a header that will behave normally until we have to scroll and then it will become smaller but still stick to the top of the viewport.</p>

<h4>The HTML</h4>

<p>For this example all we need is a header with an h1 and the main div which holds the content that we can scroll over.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;header&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Animated Sticky Header<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span> Curabitur quam neque, malesuada sit amet justo ut, posuere pretium quam. In laoreet nunc velit. Nam mattis erat et leo mollis, sed pulvinar lectus volutpat. Phasellus mi eros, sollicitudin non elit sed, molestie viverra eros. Nullam facilisis mauris ante, sed vulputate sapien efficitur quis. Curabitur vitae lorem eros. Fusce orci odio, eleifend et sem luctus, bibendum viverra nibh. Proin vitae libero egestas, consequat orci id, facilisis ex. Quisque lectus dui, mattis non lectus ac, finibus facilisis velit. Integer mauris nibh, suscipit eu egestas nec, placerat scelerisque purus. Nulla facilisi. Proin eleifend, lectus eget rutrum luctus, dolor nunc luctus ex, sed consequat urna nisi ac ipsum.In hac habitasse platea dictumst.<span class="nt">&lt;p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>The CSS</h4>

<p>In order to make the header sticky we have to fix it&rsquo;s position to the top of the viewport, hide any overflow and make sure it is always visible by setting the <code>z-index</code> of the header:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">overflow</span><span class="o">:</span> <span class="nt">hidden</span><span class="o">;</span>
</span><span class='line'><span class="nt">position</span><span class="o">:</span> <span class="nt">fixed</span><span class="o">;</span>
</span><span class='line'><span class="nt">top</span><span class="o">:</span> <span class="nt">0</span><span class="o">;</span>
</span><span class='line'><span class="nt">left</span><span class="o">:</span> <span class="nt">0</span><span class="o">;</span>
</span><span class='line'><span class="nt">z-index</span><span class="o">:</span> <span class="nt">999</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This will now keep the header always at the top and visible.</p>

<p>The animation of the header can be achived by having a different style rule for when the user has scrolled down -<code>.smaller</code> class. We cna detect if the user has scrolled down using JavaScript (described below) and apply the <code>.smaller</code> class to the <code>&lt;header&gt;</code>. When the header is smaller, we are reducing its height and the font size of the <code>&lt;h1&gt;</code>. This is now the full CSS:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">html</span><span class="o">,</span>
</span><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">min-height</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">header</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#F58065</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0.75em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">4em</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#fcfcfc</span><span class="p">;</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">fixed</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">999</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">max-width</span><span class="o">:</span> <span class="m">70%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.smaller</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.smaller</span> <span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">p</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">max-width</span><span class="o">:</span> <span class="m">70%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">min-height</span><span class="o">:</span><span class="m">700px</span><span class="p">;</span> <span class="o">/&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">this</span> <span class="n">is</span> <span class="n">just</span> <span class="n">to</span> <span class="n">force</span> <span class="n">scrolling</span> <span class="n">since</span> <span class="n">we</span> <span class="n">don</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">t</span> <span class="n">have</span> <span class="n">much</span> <span class="k">content</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;/</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">h1</span><span class="o">&gt;</span><span class="nt">main</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding-top</span><span class="o">:</span> <span class="m">8em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>The JavaScript</h4>

<p>As mentioned above, in order to animate the header we have to detect of the user is scrolling. This can be achieved by checking if the <code>pageYOffset</code> or the value received from the <code>document.documentElement.scrollTop</code> the returned value is the distance scrolled in pixels.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">scroll</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">distanceY</span> <span class="o">=</span> <span class="nx">getScrollTop</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">shrinkOn</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">header</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">header</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">distanceY</span> <span class="o">&gt;</span> <span class="nx">shrinkOn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">header</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="kr">class</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">smaller</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">header</span><span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="kr">class</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">getScrollTop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">pageYOffset</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="kc">undefined</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;){</span>
</span><span class='line'>      <span class="c1">//most browsers except IE before 9</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">pageYOffset</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">B</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span> <span class="c1">//IE &amp;lsquo;quirks&amp;rsquo;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">D</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">;</span> <span class="c1">//IE with DOCTYPE</span>
</span><span class='line'>      <span class="nx">D</span> <span class="o">=</span> <span class="p">(</span><span class="nx">D</span><span class="p">.</span><span class="nx">clientHeight</span><span class="p">)</span><span class="o">?</span> <span class="nx">D</span><span class="o">:</span> <span class="nx">B</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">D</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">init</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 Canvas Particles System (Pt. 1)]]></title>
    <link href="http://lili2311.github.io/blog/2014/07/22/Canvas-Particles/"/>
    <updated>2014-07-22T00:00:00+01:00</updated>
    <id>http://lili2311.github.io/blog/2014/07/22/Canvas-Particles</id>
    <content type="html"><![CDATA[<p>Learning to make a simple particle system using HTML5 Canvas and Javascript.</p>

<p>In this tutorial I will cover:</p>

<ol>
<li>Initialising Canvas</li>
<li>Drawing circles</li>
<li>Simple animation for particle movement using <code>SetInterval()</code></li>
<li>Improving the code using <code>RequestAnimationFrame()</code></li>
</ol>


<h4>Initialising Canvas</h4>

<p>Introduced in HTML5, the HTML  <code>&lt;canvas&gt;</code>  element can be used to draw graphics via scripting in JavaScript. The <code>&lt;canvas&gt;</code>  element isn&rsquo;t supported in some older browsers, but is supported in recent versions of all major browsers. More information can be found here: <a href="http://caniuse.com/#feat=canvas">http://caniuse.com/#feat=canvas</a>. <code>&lt;canvas&gt;</code> element requires the closing tag, like so:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">&quot;myCanvas&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span></code></pre></td></tr></table></div></figure>
This creates a blank canvas for us to use. You can set the with and height at this point:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">&quot;myCanvas&quot;</span> <span class="na">width=</span><span class="s">&quot;500&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span><span class="nt">&gt;</span> JavaScript Particles Canvas <span class="nt">&lt;/canvas&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>If not specified, <strong>width</strong> defaults to <strong>300px</strong> and <strong>height</strong> defaults to <strong>150px</strong>.</p>

<p>Some older versions of browsers do not support the <code>&lt;canvas&gt;</code> element, we can provide fallback content. We just provide alternate content inside the <code>&lt;canvas&gt;</code> element. Browsers which don&rsquo;t support <code>&lt;canvas&gt;</code> will ignore the container and render the fallback content inside it, otherwise they will render the canvas normally:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">&quot;myCanvas&quot;</span> <span class="na">width=</span><span class="s">&quot;500&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can even include a different element inside the canvas element:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">&quot;myCanvas&quot;</span> <span class="na">width=</span><span class="s">&quot;500&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;img/example.png&quot;</span> <span class="na">width=</span><span class="s">&quot;500&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span> <span class="na">alt=</span><span class="s">&quot;Example Image&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We have now initialized a blank canvas and are ready to draw something. I will cover drawing circles in the <a href="http://lili2311.github.io/blog/2014/11/16/HTML5-Canvas-Particle-System-pt2/">next blog post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create a Simple HTML Form]]></title>
    <link href="http://lili2311.github.io/blog/2014/02/18/Simple-HTML-Form-Example/"/>
    <updated>2014-02-18T00:00:00+00:00</updated>
    <id>http://lili2311.github.io/blog/2014/02/18/Simple-HTML-Form-Example</id>
    <content type="html"><![CDATA[<p>For my first web page I wanted to create something simple, but also challenging for myself. I created some web pages whilst at university and have attempted it a few times since but lack of understanding was holding me back, and I found it very discouraging not getting far. So after a couple of courses on <a href="http://www.codecademy.com/">Codeacademy</a> and some patient tutoring from my boyfriend (who is a web developer), I finally feel like I am getting somewhere.</p>

<p>I have never in the past managed to use forms or manipulate data using JavaScript on a web page so these were elements I wanted to include in my first project. I should mention that I am not new to coding or scripting, but am a complete noob to web development. In the end I wanted a page that was reminiscent of <em>Lorem Ipsum</em> text generators, but much simpler: here is the <a href="http://www.lilianakastilio.co.uk/meow/meow.html">result</a>. The user can enter some text and in return get a &ldquo;Meow&rdquo; filled paragraph.</p>

<p>So how did I do it?
After some franctic googling and trying desperately to remember what I have learned at university about HTML, I have found that we need two main things to make a webpage: <code>HTML</code> and <code>CSS</code>. But in this example we will also need Javascript to be able to process user input.</p>

<h4>HTML - HyperText Markup Language.</h4>


<p>First things first is to create a file <code>index.html</code> and insert the basic HTML5 structure of a web page:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Page title goes here<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>So lets explain each tag:</p>

<ol>
<li><code>&lt;!DOCTYPE html&gt;</code> - here we are declaring that the document contains HTML5 markup.</li>
<li><code>&lt;head&gt;</code> - here you will store links to or definitions of scripts and stylesheets. Any description of the page content goes here, such as page title. Search engines will use this to add the page to their search index. This must be the first element in the <code>&lt;html&gt;</code> element.</li>
<li><code>&lt;title&gt;</code> - this defines the page title, which will be shown in the browser tab or title bar.</li>
<li><code>&lt;body&gt;</code> - this holds the content of the HTML page. This must be the second element in the <code>&lt;html&gt;</code> element.</li>
</ol>


<p>At this stage opening <code>index.html</code> in the browser will produce an empty page with the tab title &ldquo;Page title goes here&rdquo;.</p>

<p>Earlier I mentioned that I wanted the page to have an input field and a button to process the input on click. Looking at the <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/HTML5_element_list">HTML 5 Element List</a>, we can see that within the <code>&lt;form&gt;</code> we have <code>&lt;input&gt;</code> and <code>&lt;button&gt;</code> elements available to us. We will also need a <code>&lt;label&gt;</code> to caption the <code>&lt;input&gt;</code>. Here is them all added:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Meow<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">&quot;meow-form&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;label&gt;</span>Type Anything:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>            <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;meow-input&quot;</span> <span class="na">name=</span><span class="s">&quot;field&quot;</span> <span class="na">maxlength=</span><span class="s">&quot;255&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">autocomplete=</span><span class="s">&quot;off&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>Go!<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The form is within a container <code>&lt;div&gt;</code>, it can also be called a content <code>&lt;div&gt;</code>. Placing the form in the container will allow for more sophisticated CSS styling and to place the elements anywhere we want on the page with ease. There are a couple of thigs to explain here:</p>

<ol>
<li><code>class</code> and <code>id</code> attributes. The <code>class</code> attribute in the <code>&lt;div&gt;</code> element assigns the element to a named class (in this case <code>form-container</code>). Multiple elements in the document can have the same class value, for any unique elements <code>id</code> is more appropriate. (Note: <code>id</code> must be unique in the document). However in this case, <code>id</code> could have also been used. I found a simple explanation of where to use which <a href="http://www.impressivewebs.com/difference-class-id-css/">here</a>. Both <code>id</code> and <code>class</code> are used as selectors in the stylesheet to style the elements (more on this later).</li>
<li><code>&lt;label&gt;</code> - simply has text to be used as a caption.</li>
<li><code>&lt;input&gt;</code> - we have given the input an <code>id</code> so that it can be styled later on.</li>
<li><code>&lt;button&gt;</code> - setting the <code>type="submit"</code> will submit form data when the button is pressed. This is the default option if nothing is specified.</li>
</ol>


<p>Loading the <code>index.html</code> in the browser now gives us this:</p>

<p><img src="http://i.imgur.com/ExVY6i4.png" alt="" /></p>

<h4>CSS - Cascading Style Sheets.</h4>


<p>CSS describes how a structured element (HTML or XML) must be rendered on screen.CSS can be:</p>

<ol>
<li><em>inline</em> - using the style attribute in HTML elements.</li>
<li><em>internal</em> - using the <code>&lt;style&gt;</code> element in the <code>&lt;head&gt;</code> section.</li>
<li><em>external</em> - using an external <code>.css</code> file.</li>
</ol>


<p>I am putting all CSS in an external <code>style.css</code>:</p>

<p>First we can set the body of the page to have a background image:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="sx">url(images/lined_paper.png)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The whole expression is a <strong><em>rule</em></strong>, and <strong><em>body</em></strong> is a selector, which selects which element the rules apply to.</p>

<p>Now we want to give the whole form a width and set the font. Earlier we have made the div that contained the form be of class &ldquo;form-container&rdquo;, in order to select elements of that class we have to put a <code>.</code> in front of the class name:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.form-container</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">90px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-family</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Roboto</span> <span class="n">Condensed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We can give the input a desired width:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">input</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And style the button:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">button</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span><span class="m">#ED518A</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span><span class="m">37px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">3px</span> <span class="k">solid</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>By saying display the button as an <code>inline-block</code> we are actually telling it to stay on the same line.</p>

<p>Now we need to add a line in the <code>&lt;head&gt;</code>  to load the external <code>.css</code> file and to load the custom Google font (the Google font link can be generated on <a href="http://www.google.com/fonts">Google Fonts</a> website):
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Meow<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;normalize.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&#39;http://fonts.googleapis.com/css?family=Roboto+Condensed:700,400&#39;</span> <span class="na">rel=</span><span class="s">&#39;stylesheet&#39;</span> <span class="na">type=</span><span class="s">&#39;text/css&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>After applying all the changes, our web page should now look like this:
<img src="http://i.imgur.com/vOhv3Li.png" alt="" /></p>

<p>Trying this in a few different browsers may yield a different result, but we can help the page to render consistently across different browsers by using something called <a href="http://necolas.github.io/normalize.css/">Normalize.css</a>. You can see that I have already included normalize.css in the <code>&lt;head&gt;</code>. There is also a project called <a href="http://www.cssreset.com/">reset.css</a>, there are many different versions you can try, but <a href="http://stackoverflow.com/a/8357635">here</a> an overview of the main differences between <code>reset.css</code> and <code>normalize.css</code>.</p>

<h4>JavaScript</h4>


<p>Javascript is an (quasi) object-oriented language, widely used as a scripting language for web pages. To add javascript to our page we will create an external script called meow.js which we can include in the index.html:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;meow.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>This is the full meow.js:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">send</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">input_text</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">meow</span><span class="o">-</span><span class="nx">input</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">meow</span><span class="o">-</span><span class="nx">output</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;).</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">meow</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span><span class="nx">input_text</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">meow</span><span class="p">(</span><span class="nx">times</span><span class="p">,</span> <span class="nx">input_text</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">times</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">times</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">output</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span> <span class="nx">meow</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">input_text</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">output</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>To explain briefly what is being done here: the function <code>send(event)</code> is called once the button is clicked. We are extracting the user input from the button with id <code>meow-input</code> and using it to calculate the output. The function <code>meow(times, input_text)</code> repeats the user input <code>x</code> number of times with the word &ldquo;meow&rdquo; in between.</p>

<p>We also need to tell the button to submit the information once it is clicked and use the function send (which is above), this I have done with some internal javascript:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">form</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">meow</span><span class="o">-</span><span class="nx">form</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="nx">form</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">submit</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">send</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And that&rsquo;s it!</p>

<p><strong>Some useful resources:</strong></p>

<ol>
<li><a href="https://developer.mozilla.org/en-US/">MDN - Mozilla Developer Network</a></li>
<li><a href="http://caniuse.com/">Can I Use&hellip;</a></li>
<li><a href="http://color.hailpixel.com/">color.hailpixel.com</a></li>
<li><a href="http://stackoverflow.com/">StackOverflow</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
